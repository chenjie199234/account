// Code generated by protoc-gen-go-web. DO NOT EDIT.
// version:
// 	protoc-gen-go-web v0.0.120<br />
// 	protoc            v5.28.0<br />
// source: api/account_base.proto<br />

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	metadata "github.com/chenjie199234/Corelib/metadata"
	web "github.com/chenjie199234/Corelib/web"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	slog "log/slog"
	http "net/http"
	strings "strings"
)

var _WebPathBaseGetOauthUrl = "/account.base/get_oauth_url"
var _WebPathBaseLogin = "/account.base/login"
var _WebPathBaseBaseInfo = "/account.base/base_info"
var _WebPathBaseUpdateStaticPassword = "/account.base/update_static_password"
var _WebPathBaseResetStaticPassword = "/account.base/reset_static_password"
var _WebPathBaseIdcardDuplicateCheck = "/account.base/idcard_duplicate_check"
var _WebPathBaseSetIdcard = "/account.base/set_idcard"
var _WebPathBaseUpdateOauth = "/account.base/update_oauth"
var _WebPathBaseDelOauth = "/account.base/del_oauth"
var _WebPathBaseEmailDuplicateCheck = "/account.base/email_duplicate_check"
var _WebPathBaseUpdateEmail = "/account.base/update_email"
var _WebPathBaseDelEmail = "/account.base/del_email"
var _WebPathBaseTelDuplicateCheck = "/account.base/tel_duplicate_check"
var _WebPathBaseUpdateTel = "/account.base/update_tel"
var _WebPathBaseDelTel = "/account.base/del_tel"

type BaseWebClient interface {
	GetOauthUrl(context.Context, *GetOauthUrlReq, http.Header) (*GetOauthUrlResp, error)
	Login(context.Context, *LoginReq, http.Header) (*LoginResp, error)
	// if the request if from web,only can get self's info,the src_type and src in request will be ignored,the user_id in token will be used
	BaseInfo(context.Context, *BaseInfoReq, http.Header) (*BaseInfoResp, error)
	UpdateStaticPassword(context.Context, *UpdateStaticPasswordReq, http.Header) (*UpdateStaticPasswordResp, error)
	ResetStaticPassword(context.Context, *ResetStaticPasswordReq, http.Header) (*ResetStaticPasswordResp, error)
	IdcardDuplicateCheck(context.Context, *IdcardDuplicateCheckReq, http.Header) (*IdcardDuplicateCheckResp, error)
	SetIdcard(context.Context, *SetIdcardReq, http.Header) (*SetIdcardResp, error)
	UpdateOauth(context.Context, *UpdateOauthReq, http.Header) (*UpdateOauthResp, error)
	DelOauth(context.Context, *DelOauthReq, http.Header) (*DelOauthResp, error)
	EmailDuplicateCheck(context.Context, *EmailDuplicateCheckReq, http.Header) (*EmailDuplicateCheckResp, error)
	UpdateEmail(context.Context, *UpdateEmailReq, http.Header) (*UpdateEmailResp, error)
	DelEmail(context.Context, *DelEmailReq, http.Header) (*DelEmailResp, error)
	TelDuplicateCheck(context.Context, *TelDuplicateCheckReq, http.Header) (*TelDuplicateCheckResp, error)
	UpdateTel(context.Context, *UpdateTelReq, http.Header) (*UpdateTelResp, error)
	DelTel(context.Context, *DelTelReq, http.Header) (*DelTelResp, error)
}

type baseWebClient struct {
	cc *web.WebClient
}

func NewBaseWebClient(c *web.WebClient) BaseWebClient {
	return &baseWebClient{cc: c}
}

func (c *baseWebClient) GetOauthUrl(ctx context.Context, req *GetOauthUrlReq, header http.Header) (*GetOauthUrlResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseGetOauthUrl, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(GetOauthUrlResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) Login(ctx context.Context, req *LoginReq, header http.Header) (*LoginResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseLogin, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(LoginResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) BaseInfo(ctx context.Context, req *BaseInfoReq, header http.Header) (*BaseInfoResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseBaseInfo, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(BaseInfoResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) UpdateStaticPassword(ctx context.Context, req *UpdateStaticPasswordReq, header http.Header) (*UpdateStaticPasswordResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseUpdateStaticPassword, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(UpdateStaticPasswordResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) ResetStaticPassword(ctx context.Context, req *ResetStaticPasswordReq, header http.Header) (*ResetStaticPasswordResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseResetStaticPassword, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(ResetStaticPasswordResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) IdcardDuplicateCheck(ctx context.Context, req *IdcardDuplicateCheckReq, header http.Header) (*IdcardDuplicateCheckResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseIdcardDuplicateCheck, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(IdcardDuplicateCheckResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) SetIdcard(ctx context.Context, req *SetIdcardReq, header http.Header) (*SetIdcardResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseSetIdcard, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(SetIdcardResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) UpdateOauth(ctx context.Context, req *UpdateOauthReq, header http.Header) (*UpdateOauthResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseUpdateOauth, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(UpdateOauthResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) DelOauth(ctx context.Context, req *DelOauthReq, header http.Header) (*DelOauthResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseDelOauth, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(DelOauthResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) EmailDuplicateCheck(ctx context.Context, req *EmailDuplicateCheckReq, header http.Header) (*EmailDuplicateCheckResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseEmailDuplicateCheck, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(EmailDuplicateCheckResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) UpdateEmail(ctx context.Context, req *UpdateEmailReq, header http.Header) (*UpdateEmailResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseUpdateEmail, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(UpdateEmailResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) DelEmail(ctx context.Context, req *DelEmailReq, header http.Header) (*DelEmailResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseDelEmail, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(DelEmailResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) TelDuplicateCheck(ctx context.Context, req *TelDuplicateCheckReq, header http.Header) (*TelDuplicateCheckResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseTelDuplicateCheck, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(TelDuplicateCheckResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) UpdateTel(ctx context.Context, req *UpdateTelReq, header http.Header) (*UpdateTelResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseUpdateTel, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(UpdateTelResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *baseWebClient) DelTel(ctx context.Context, req *DelTelReq, header http.Header) (*DelTelResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathBaseDelTel, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(DelTelResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}

type BaseWebServer interface {
	GetOauthUrl(context.Context, *GetOauthUrlReq) (*GetOauthUrlResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// if the request if from web,only can get self's info,the src_type and src in request will be ignored,the user_id in token will be used
	BaseInfo(context.Context, *BaseInfoReq) (*BaseInfoResp, error)
	UpdateStaticPassword(context.Context, *UpdateStaticPasswordReq) (*UpdateStaticPasswordResp, error)
	ResetStaticPassword(context.Context, *ResetStaticPasswordReq) (*ResetStaticPasswordResp, error)
	IdcardDuplicateCheck(context.Context, *IdcardDuplicateCheckReq) (*IdcardDuplicateCheckResp, error)
	SetIdcard(context.Context, *SetIdcardReq) (*SetIdcardResp, error)
	UpdateOauth(context.Context, *UpdateOauthReq) (*UpdateOauthResp, error)
	DelOauth(context.Context, *DelOauthReq) (*DelOauthResp, error)
	EmailDuplicateCheck(context.Context, *EmailDuplicateCheckReq) (*EmailDuplicateCheckResp, error)
	UpdateEmail(context.Context, *UpdateEmailReq) (*UpdateEmailResp, error)
	DelEmail(context.Context, *DelEmailReq) (*DelEmailResp, error)
	TelDuplicateCheck(context.Context, *TelDuplicateCheckReq) (*TelDuplicateCheckResp, error)
	UpdateTel(context.Context, *UpdateTelReq) (*UpdateTelResp, error)
	DelTel(context.Context, *DelTelReq) (*DelTelResp, error)
}

func _Base_GetOauthUrl_WebHandler(handler func(context.Context, *GetOauthUrlReq) (*GetOauthUrlResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetOauthUrlReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/get_oauth_url] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/get_oauth_url] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/get_oauth_url] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/get_oauth_url] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/get_oauth_url] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.OauthServiceName
			if form := ctx.GetForm("oauth_service_name"); len(form) != 0 {
				req.OauthServiceName = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/get_oauth_url] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetOauthUrlResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_Login_WebHandler(handler func(context.Context, *LoginReq) (*LoginResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(LoginReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/login] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/login] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/login] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/login] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/login] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.SrcType
			if form := ctx.GetForm("src_type"); len(form) != 0 {
				req.SrcType = form
			}
			// req.SrcTypeExtra
			if form := ctx.GetForm("src_type_extra"); len(form) != 0 {
				req.SrcTypeExtra = form
			}
			// req.PasswordType
			if form := ctx.GetForm("password_type"); len(form) != 0 {
				req.PasswordType = form
			}
			// req.Password
			if form := ctx.GetForm("password"); len(form) != 0 {
				req.Password = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/login] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(LoginResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_BaseInfo_WebHandler(handler func(context.Context, *BaseInfoReq) (*BaseInfoResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(BaseInfoReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/base_info] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/base_info] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/base_info] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/base_info] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/base_info] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.SrcType
			if form := ctx.GetForm("src_type"); len(form) != 0 {
				req.SrcType = form
			}
			// req.Src
			if form := ctx.GetForm("src"); len(form) != 0 {
				req.Src = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/base_info] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(BaseInfoResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_UpdateStaticPassword_WebHandler(handler func(context.Context, *UpdateStaticPasswordReq) (*UpdateStaticPasswordResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(UpdateStaticPasswordReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_static_password] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_static_password] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_static_password] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_static_password] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_static_password] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.OldStaticPassword
			if form := ctx.GetForm("old_static_password"); len(form) != 0 {
				req.OldStaticPassword = form
			}
			// req.NewStaticPassword
			if form := ctx.GetForm("new_static_password"); len(form) != 0 {
				req.NewStaticPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/update_static_password] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(UpdateStaticPasswordResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_ResetStaticPassword_WebHandler(handler func(context.Context, *ResetStaticPasswordReq) (*ResetStaticPasswordResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(ResetStaticPasswordReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/reset_static_password] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/reset_static_password] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/reset_static_password] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/reset_static_password] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/reset_static_password] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/reset_static_password] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(ResetStaticPasswordResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_IdcardDuplicateCheck_WebHandler(handler func(context.Context, *IdcardDuplicateCheckReq) (*IdcardDuplicateCheckResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(IdcardDuplicateCheckReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.Idcard
			if form := ctx.GetForm("idcard"); len(form) != 0 {
				req.Idcard = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/idcard_duplicate_check] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(IdcardDuplicateCheckResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_SetIdcard_WebHandler(handler func(context.Context, *SetIdcardReq) (*SetIdcardResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(SetIdcardReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/set_idcard] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/set_idcard] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/set_idcard] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/set_idcard] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/set_idcard] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.Idcard
			if form := ctx.GetForm("idcard"); len(form) != 0 {
				req.Idcard = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/set_idcard] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(SetIdcardResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_UpdateOauth_WebHandler(handler func(context.Context, *UpdateOauthReq) (*UpdateOauthResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(UpdateOauthReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_oauth] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_oauth] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_oauth] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_oauth] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_oauth] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
			// req.NewOauthServiceName
			if form := ctx.GetForm("new_oauth_service_name"); len(form) != 0 {
				req.NewOauthServiceName = form
			}
			// req.NewOauthDynamicPassword
			if form := ctx.GetForm("new_oauth_dynamic_password"); len(form) != 0 {
				req.NewOauthDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/update_oauth] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(UpdateOauthResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_DelOauth_WebHandler(handler func(context.Context, *DelOauthReq) (*DelOauthResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(DelOauthReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_oauth] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_oauth] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_oauth] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_oauth] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_oauth] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
			// req.DelOauthServiceName
			if form := ctx.GetForm("del_oauth_service_name"); len(form) != 0 {
				req.DelOauthServiceName = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/del_oauth] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(DelOauthResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_EmailDuplicateCheck_WebHandler(handler func(context.Context, *EmailDuplicateCheckReq) (*EmailDuplicateCheckResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(EmailDuplicateCheckReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.Email
			if form := ctx.GetForm("email"); len(form) != 0 {
				req.Email = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/email_duplicate_check] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(EmailDuplicateCheckResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_UpdateEmail_WebHandler(handler func(context.Context, *UpdateEmailReq) (*UpdateEmailResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(UpdateEmailReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_email] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_email] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_email] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_email] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_email] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
			// req.NewEmail
			if form := ctx.GetForm("new_email"); len(form) != 0 {
				req.NewEmail = form
			}
			// req.NewEmailDynamicPassword
			if form := ctx.GetForm("new_email_dynamic_password"); len(form) != 0 {
				req.NewEmailDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/update_email] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(UpdateEmailResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_DelEmail_WebHandler(handler func(context.Context, *DelEmailReq) (*DelEmailResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(DelEmailReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_email] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_email] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_email] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_email] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_email] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/del_email] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(DelEmailResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_TelDuplicateCheck_WebHandler(handler func(context.Context, *TelDuplicateCheckReq) (*TelDuplicateCheckResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(TelDuplicateCheckReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.Tel
			if form := ctx.GetForm("tel"); len(form) != 0 {
				req.Tel = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/tel_duplicate_check] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(TelDuplicateCheckResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_UpdateTel_WebHandler(handler func(context.Context, *UpdateTelReq) (*UpdateTelResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(UpdateTelReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_tel] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_tel] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_tel] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/update_tel] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/update_tel] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
			// req.NewTel
			if form := ctx.GetForm("new_tel"); len(form) != 0 {
				req.NewTel = form
			}
			// req.NewTelDynamicPassword
			if form := ctx.GetForm("new_tel_dynamic_password"); len(form) != 0 {
				req.NewTelDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/update_tel] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(UpdateTelResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _Base_DelTel_WebHandler(handler func(context.Context, *DelTelReq) (*DelTelResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(DelTelReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_tel] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_tel] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_tel] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/account.base/del_tel] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/account.base/del_tel] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.VerifySrcType
			if form := ctx.GetForm("verify_src_type"); len(form) != 0 {
				req.VerifySrcType = form
			}
			// req.VerifySrcTypeExtra
			if form := ctx.GetForm("verify_src_type_extra"); len(form) != 0 {
				req.VerifySrcTypeExtra = form
			}
			// req.VerifyDynamicPassword
			if form := ctx.GetForm("verify_dynamic_password"); len(form) != 0 {
				req.VerifyDynamicPassword = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/account.base/del_tel] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(DelTelResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func RegisterBaseWebServer(router *web.Router, svc BaseWebServer, allmids map[string]web.OutsideHandler) {
	// avoid lint
	_ = allmids
	router.Post(_WebPathBaseGetOauthUrl, _Base_GetOauthUrl_WebHandler(svc.GetOauthUrl))
	router.Post(_WebPathBaseLogin, _Base_Login_WebHandler(svc.Login))
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_BaseInfo_WebHandler(svc.BaseInfo))
		router.Post(_WebPathBaseBaseInfo, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_UpdateStaticPassword_WebHandler(svc.UpdateStaticPassword))
		router.Post(_WebPathBaseUpdateStaticPassword, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_ResetStaticPassword_WebHandler(svc.ResetStaticPassword))
		router.Post(_WebPathBaseResetStaticPassword, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_IdcardDuplicateCheck_WebHandler(svc.IdcardDuplicateCheck))
		router.Post(_WebPathBaseIdcardDuplicateCheck, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_SetIdcard_WebHandler(svc.SetIdcard))
		router.Post(_WebPathBaseSetIdcard, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_UpdateOauth_WebHandler(svc.UpdateOauth))
		router.Post(_WebPathBaseUpdateOauth, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_DelOauth_WebHandler(svc.DelOauth))
		router.Post(_WebPathBaseDelOauth, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_EmailDuplicateCheck_WebHandler(svc.EmailDuplicateCheck))
		router.Post(_WebPathBaseEmailDuplicateCheck, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_UpdateEmail_WebHandler(svc.UpdateEmail))
		router.Post(_WebPathBaseUpdateEmail, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_DelEmail_WebHandler(svc.DelEmail))
		router.Post(_WebPathBaseDelEmail, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_TelDuplicateCheck_WebHandler(svc.TelDuplicateCheck))
		router.Post(_WebPathBaseTelDuplicateCheck, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_UpdateTel_WebHandler(svc.UpdateTel))
		router.Post(_WebPathBaseUpdateTel, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Base_DelTel_WebHandler(svc.DelTel))
		router.Post(_WebPathBaseDelTel, mids...)
	}
}
