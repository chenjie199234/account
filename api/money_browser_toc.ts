// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.79<br />
// 	protoc             v4.24.1<br />
// source: api/money.proto<br />

import Axios from "axios";

export interface Error{
	code: number;
	msg: string;
}

export interface MoneyLog{
	user_id: string;
	action: string;//spend,recharge,refund
	unique_id: string;
	src_dst: string;
	money_type: string;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	money_amount: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	ctime: number;
}
function JsonToMoneyLog(jsonobj: { [k:string]:any }): MoneyLog{
	let obj: MoneyLog={
		user_id:'',
		action:'',
		unique_id:'',
		src_dst:'',
		money_type:'',
		money_amount:0,
		ctime:0,
	}
	//user_id
	if(jsonobj['user_id']!=null&&jsonobj['user_id']!=undefined){
		if(typeof jsonobj['user_id']!='string'){
			throw 'MoneyLog.user_id must be string'
		}
		obj['user_id']=jsonobj['user_id']
	}
	//action
	if(jsonobj['action']!=null&&jsonobj['action']!=undefined){
		if(typeof jsonobj['action']!='string'){
			throw 'MoneyLog.action must be string'
		}
		obj['action']=jsonobj['action']
	}
	//unique_id
	if(jsonobj['unique_id']!=null&&jsonobj['unique_id']!=undefined){
		if(typeof jsonobj['unique_id']!='string'){
			throw 'MoneyLog.unique_id must be string'
		}
		obj['unique_id']=jsonobj['unique_id']
	}
	//src_dst
	if(jsonobj['src_dst']!=null&&jsonobj['src_dst']!=undefined){
		if(typeof jsonobj['src_dst']!='string'){
			throw 'MoneyLog.src_dst must be string'
		}
		obj['src_dst']=jsonobj['src_dst']
	}
	//money_type
	if(jsonobj['money_type']!=null&&jsonobj['money_type']!=undefined){
		if(typeof jsonobj['money_type']!='string'){
			throw 'MoneyLog.money_type must be string'
		}
		obj['money_type']=jsonobj['money_type']
	}
	//money_amount
	if(jsonobj['money_amount']!=null&&jsonobj['money_amount']!=undefined){
		if(typeof jsonobj['money_amount']!='number'||!Number.isInteger(jsonobj['money_amount'])){
			throw 'MoneyLog.money_amount must be integer'
		}else if(jsonobj['money_amount']>4294967295||jsonobj['money_amount']<0){
			throw 'MoneyLog.money_amount overflow'
		}
		obj['money_amount']=jsonobj['money_amount']
	}
	//ctime
	if(jsonobj['ctime']!=null&&jsonobj['ctime']!=undefined){
		if(typeof jsonobj['ctime']!='number'||!Number.isInteger(jsonobj['ctime'])){
			throw 'MoneyLog.ctime must be integer'
		}else if(jsonobj['ctime']>4294967295||jsonobj['ctime']<0){
			throw 'MoneyLog.ctime overflow'
		}
		obj['ctime']=jsonobj['ctime']
	}
	return obj
}
export interface SelfMoneyLogsReq{
	//0:return all logs
	//>0:return the required page's data
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	start_time: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	end_time: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;
	action: string;
}
function SelfMoneyLogsReqToJson(msg: SelfMoneyLogsReq): string{
	let s: string="{"
	//start_time
	if(msg.start_time==null||msg.start_time==undefined||!Number.isInteger(msg.start_time)){
		throw 'SelfMoneyLogsReq.start_time must be integer'
	}else if(msg.start_time>4294967295||msg.start_time<0){
		throw 'SelfMoneyLogsReq.start_time overflow'
	}else{
		s+='"start_time":'+msg.start_time+','
	}
	//end_time
	if(msg.end_time==null||msg.end_time==undefined||!Number.isInteger(msg.end_time)){
		throw 'SelfMoneyLogsReq.end_time must be integer'
	}else if(msg.end_time>4294967295||msg.end_time<0){
		throw 'SelfMoneyLogsReq.end_time overflow'
	}else{
		s+='"end_time":'+msg.end_time+','
	}
	//page
	if(msg.page==null||msg.page==undefined||!Number.isInteger(msg.page)){
		throw 'SelfMoneyLogsReq.page must be integer'
	}else if(msg.page>4294967295||msg.page<0){
		throw 'SelfMoneyLogsReq.page overflow'
	}else{
		s+='"page":'+msg.page+','
	}
	//action
	if(msg.action==null||msg.action==undefined){
		throw 'SelfMoneyLogsReq.action must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.action)
		s+='"action":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface SelfMoneyLogsResp{
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	pagesize: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	totalsize: number;
	logs: Array<MoneyLog|null|undefined>|null|undefined;
}
function JsonToSelfMoneyLogsResp(jsonobj: { [k:string]:any }): SelfMoneyLogsResp{
	let obj: SelfMoneyLogsResp={
		page:0,
		pagesize:0,
		totalsize:0,
		logs:null,
	}
	//page
	if(jsonobj['page']!=null&&jsonobj['page']!=undefined){
		if(typeof jsonobj['page']!='number'||!Number.isInteger(jsonobj['page'])){
			throw 'SelfMoneyLogsResp.page must be integer'
		}else if(jsonobj['page']>4294967295||jsonobj['page']<0){
			throw 'SelfMoneyLogsResp.page overflow'
		}
		obj['page']=jsonobj['page']
	}
	//pagesize
	if(jsonobj['pagesize']!=null&&jsonobj['pagesize']!=undefined){
		if(typeof jsonobj['pagesize']!='number'||!Number.isInteger(jsonobj['pagesize'])){
			throw 'SelfMoneyLogsResp.pagesize must be integer'
		}else if(jsonobj['pagesize']>4294967295||jsonobj['pagesize']<0){
			throw 'SelfMoneyLogsResp.pagesize overflow'
		}
		obj['pagesize']=jsonobj['pagesize']
	}
	//totalsize
	if(jsonobj['totalsize']!=null&&jsonobj['totalsize']!=undefined){
		if(typeof jsonobj['totalsize']!='number'||!Number.isInteger(jsonobj['totalsize'])){
			throw 'SelfMoneyLogsResp.totalsize must be integer'
		}else if(jsonobj['totalsize']>4294967295||jsonobj['totalsize']<0){
			throw 'SelfMoneyLogsResp.totalsize overflow'
		}
		obj['totalsize']=jsonobj['totalsize']
	}
	//logs
	if(jsonobj['logs']!=null&&jsonobj['logs']!=undefined){
		if(!(jsonobj['logs'] instanceof Array)){
			throw 'SelfMoneyLogsResp.logs must be Array<MoneyLog>|null|undefined'
		}
		for(let element of jsonobj['logs']){
			if(typeof element!='object'){
				throw 'element in SelfMoneyLogsResp.logs must be MoneyLog'
			}
			if(obj['logs']==null){
				obj['logs']=new Array<MoneyLog>
			}
			obj['logs'].push(JsonToMoneyLog(element))
		}
	}
	return obj
}
const _WebPathMoneySelfMoneyLogs: string ="/account.money/self_money_logs";
//ToC means this is used for users
export class MoneyBrowserClientToC {
	constructor(host: string){
		if(host==null||host==undefined||host.length==0){
			throw "MoneyBrowserClientToC's host missing"
		}
		this.host=host
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	self_money_logs(header: { [k: string]: string },req: SelfMoneyLogsReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: SelfMoneyLogsResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=SelfMoneyLogsReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:''+e})
			return
		}
		let config={
			url:_WebPathMoneySelfMoneyLogs,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:SelfMoneyLogsResp=JsonToSelfMoneyLogsResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	private host: string
}
