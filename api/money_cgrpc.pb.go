// Code generated by protoc-gen-go-cgrpc. DO NOT EDIT.
// version:
// 	protoc-gen-go-cgrpc v0.0.77<br />
// 	protoc              v4.24.1<br />
// source: api/money.proto<br />

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	cgrpc "github.com/chenjie199234/Corelib/cgrpc"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
)

var _CGrpcPathMoneyGetMoneyLogs = "/account.money/get_money_logs"
var _CGrpcPathMoneyRechargeMoney = "/account.money/recharge_money"
var _CGrpcPathMoneySpendMoney = "/account.money/spend_money"
var _CGrpcPathMoneyRefundMoney = "/account.money/refund_money"

type MoneyCGrpcClient interface {
	GetMoneyLogs(context.Context, *GetMoneyLogsReq) (*GetMoneyLogsResp, error)
	RechargeMoney(context.Context, *RechargeMoneyReq) (*RechargeMoneyResp, error)
	SpendMoney(context.Context, *SpendMoneyReq) (*SpendMoneyResp, error)
	RefundMoney(context.Context, *RefundMoneyReq) (*RefundMoneyResp, error)
}

type moneyCGrpcClient struct {
	cc *cgrpc.CGrpcClient
}

func NewMoneyCGrpcClient(c *cgrpc.CGrpcClient) MoneyCGrpcClient {
	return &moneyCGrpcClient{cc: c}
}

func (c *moneyCGrpcClient) GetMoneyLogs(ctx context.Context, req *GetMoneyLogsReq) (*GetMoneyLogsResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(GetMoneyLogsResp)
	if e := c.cc.Call(ctx, _CGrpcPathMoneyGetMoneyLogs, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *moneyCGrpcClient) RechargeMoney(ctx context.Context, req *RechargeMoneyReq) (*RechargeMoneyResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(RechargeMoneyResp)
	if e := c.cc.Call(ctx, _CGrpcPathMoneyRechargeMoney, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *moneyCGrpcClient) SpendMoney(ctx context.Context, req *SpendMoneyReq) (*SpendMoneyResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(SpendMoneyResp)
	if e := c.cc.Call(ctx, _CGrpcPathMoneySpendMoney, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *moneyCGrpcClient) RefundMoney(ctx context.Context, req *RefundMoneyReq) (*RefundMoneyResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(RefundMoneyResp)
	if e := c.cc.Call(ctx, _CGrpcPathMoneyRefundMoney, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}

type MoneyCGrpcServer interface {
	GetMoneyLogs(context.Context, *GetMoneyLogsReq) (*GetMoneyLogsResp, error)
	RechargeMoney(context.Context, *RechargeMoneyReq) (*RechargeMoneyResp, error)
	SpendMoney(context.Context, *SpendMoneyReq) (*SpendMoneyResp, error)
	RefundMoney(context.Context, *RefundMoneyReq) (*RefundMoneyResp, error)
}

func _Money_GetMoneyLogs_CGrpcHandler(handler func(context.Context, *GetMoneyLogsReq) (*GetMoneyLogsResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(GetMoneyLogsReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/account.money/get_money_logs]", map[string]interface{}{"error": e})
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/account.money/get_money_logs]", map[string]interface{}{"error": errstr})
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(GetMoneyLogsResp)
		}
		ctx.Write(resp)
	}
}
func _Money_RechargeMoney_CGrpcHandler(handler func(context.Context, *RechargeMoneyReq) (*RechargeMoneyResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(RechargeMoneyReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/account.money/recharge_money]", map[string]interface{}{"error": e})
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(RechargeMoneyResp)
		}
		ctx.Write(resp)
	}
}
func _Money_SpendMoney_CGrpcHandler(handler func(context.Context, *SpendMoneyReq) (*SpendMoneyResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(SpendMoneyReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/account.money/spend_money]", map[string]interface{}{"error": e})
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SpendMoneyResp)
		}
		ctx.Write(resp)
	}
}
func _Money_RefundMoney_CGrpcHandler(handler func(context.Context, *RefundMoneyReq) (*RefundMoneyResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(RefundMoneyReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/account.money/refund_money]", map[string]interface{}{"error": e})
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(RefundMoneyResp)
		}
		ctx.Write(resp)
	}
}
func RegisterMoneyCGrpcServer(engine *cgrpc.CGrpcServer, svc MoneyCGrpcServer, allmids map[string]cgrpc.OutsideHandler) {
	// avoid lint
	_ = allmids
	engine.RegisterHandler("account.money", "get_money_logs", _Money_GetMoneyLogs_CGrpcHandler(svc.GetMoneyLogs))
	engine.RegisterHandler("account.money", "recharge_money", _Money_RechargeMoney_CGrpcHandler(svc.RechargeMoney))
	engine.RegisterHandler("account.money", "spend_money", _Money_SpendMoney_CGrpcHandler(svc.SpendMoney))
	engine.RegisterHandler("account.money", "refund_money", _Money_RefundMoney_CGrpcHandler(svc.RefundMoney))
}
