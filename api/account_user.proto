syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package account;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/account/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for user service
service user{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";//can be set to get,delete,post,put,patch
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc get_user_info(get_user_info_req)returns(get_user_info_resp);

	rpc login(login_req)returns(login_resp){
		option (pbex.method)="post";
	}
	rpc self_user_info(self_user_info_req)returns(self_user_info_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_static_password(update_static_password_req)returns(update_static_password_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc nick_name_duplicate_check(nick_name_duplicate_check_req)returns(nick_name_duplicate_check_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_nick_name(update_nick_name_req)returns(update_nick_name_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_nick_name(del_nick_name_req)returns(del_nick_name_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc idcard_duplicate_check(idcard_duplicate_check_req)returns(idcard_duplicate_check_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_idcard(update_idcard_req)returns(update_idcard_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_idcard(del_idcard_req)returns(del_idcard_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc email_duplicate_check(email_duplicate_check_req)returns(email_duplicate_check_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_email(update_email_req)returns(update_email_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_email(del_email_req)returns(del_email_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc tel_duplicate_check(tel_duplicate_check_req)returns(tel_duplicate_check_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_tel(update_tel_req)returns(update_tel_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_tel(del_tel_req)returns(del_tel_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message user_info{
	string user_id=1;
	string idcard=2;
	string tel=3;
	string email=4;
	string nick_name=5;
	uint32 ctime=6;
	map<string,int32> money=7;
}
message get_user_info_req{
	string src_type=1[(pbex.string_bytes_in)="user_id",(pbex.string_bytes_in)="tel",(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="idcard",(pbex.string_bytes_in)="nick_name"];
	string src=2[(pbex.string_bytes_len_gt)=0];
}
message get_user_info_resp{
	user_info info=1;
}
message login_req{
	string src_type=1[(pbex.string_bytes_in)="tel",(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="idcard",(pbex.string_bytes_in)="nick_name"];
	string src=2[(pbex.string_bytes_len_gt)=0];
	//when src_type is idcard or nick_name,this can't be dynamic
	string password_type=3[(pbex.string_bytes_in)="static",(pbex.string_bytes_in)="dynamic"];
	//when password_type is dynamic and this is empty,means send dynamic password to email or tel.
	//when password_type is dynamic and this is not empty,means verify dynamic password.
	string password=4;
}
message login_resp{
	string token=1;
	user_info info=2;
	//verify:server already send the dynamic password to user's email or tel(depend on the login_req's src_type and src) and is waiting for verify
	//password:login success,but this account must finish the static password set
	//success:nothing need to do
	string step=3;
}
message self_user_info_req{
}
message self_user_info_resp{
	user_info info=1;
}
message update_static_password_req{
	//if this is empty,means this is the first time to set the static password
	string old_static_password=1;
	string new_static_password=2[(pbex.string_bytes_len_gte)=10];
}
message update_static_password_resp{
}
message nick_name_duplicate_check_req{
	string nick_name=1[(pbex.string_bytes_len_gt)=0];
}
message nick_name_duplicate_check_resp{
	bool duplicate=1;
}
message update_nick_name_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
	string new_nick_name=3[(pbex.string_bytes_len_gt)=0];
}
message update_nick_name_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the update_nick_name_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=2;
}
message del_nick_name_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
}
message del_nick_name_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the del_nick_name_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//if this is true,means this is the last way to login this account
	//if del this,this account will be deleted completely
	bool final=2;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=3;
}
message idcard_duplicate_check_req{
	string idcard=1[(pbex.string_bytes_len_gt)=0];
}
message idcard_duplicate_check_resp{
	bool duplicate=1;
}
message update_idcard_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
	string new_idcard=3[(pbex.string_bytes_len_gt)=0];
}
message update_idcard_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the update_idcard_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=2;
}
message del_idcard_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
}
message del_idcard_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the del_idcard_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//if this is true,means this is the last way to login this account
	//if del this,this account will be deleted completely
	bool final=2;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=3;
}
message email_duplicate_check_req{
	string email=1[(pbex.string_bytes_len_gt)=0];
}
message email_duplicate_check_resp{
	bool duplicate=1;
}
message update_email_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
	string new_email=3[(pbex.string_bytes_len_gt)=0];
	//if this is empty,means send dynamic password.
	//if this is not empty,means verify dynamic password.
	string new_email_dynamic_password=4;
}
message update_email_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the update_email_req's old_receiver_type) and is waiting for verify
	//newverify:server already send the dynamic password to the new email(depend on the update_email_req's new_email) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=2;
}
message del_email_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
}
message del_email_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the del_email_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//if this is true,means this is the last way to login this account
	//if del this,this account will be deleted completely
	bool final=2;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=3;
}
message tel_duplicate_check_req{
	string tel=1[(pbex.string_bytes_len_gt)=0];
}
message tel_duplicate_check_resp{
	bool duplicate=1;
}
message update_tel_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
	string new_tel=3[(pbex.string_bytes_len_gt)=0];
	//if this is empty,means send dynamic password.
	//if this is not empty,means verify dynamic password.
	string new_tel_dynamic_password=4;
}
message update_tel_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the update_tel_req's old_receiver_type) and is waiting for verify
	//newverify:server already send the dynamic password to the new tel(depend on the update_tel_req's new_tel) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=2;
}
message del_tel_req{
	string old_receiver_type=1[(pbex.string_bytes_in)="email",(pbex.string_bytes_in)="tel"];
	//if this is empty,means send dynamic password
	//if this is not empty,means verify dynamic password
	string old_dynamic_password=2;
}
message del_tel_resp{
	//oldverify:server already send the dynamic password to user's email or tel(depend on the del_tel_req's old_receiver_type) and is waiting for verify
	//success:nothing need to do
	string step=1;
	//if this is true,means this is the last way to login this account
	//if del this,this account will be deleted completely
	bool final=2;
	//send dynamic password to where,this will be masked
	//when step is success,ignore this
	string receiver=3;
}
