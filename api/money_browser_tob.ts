// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.77<br />
// 	protoc             v4.24.1<br />
// source: api/money.proto<br />

import Axios from "axios";
import Long from "long";

export interface Error{
	code: number;
	msg: string;
}

export interface GetMoneyLogsReq{
	user_id: string;//Mongodb's ObjectId.Hex()
}
function GetMoneyLogsReqToJson(msg: GetMoneyLogsReq): string{
	let s: string="{"
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'GetMoneyLogsReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface GetMoneyLogsResp{
	logs: Array<MoneyLog|null|undefined>|null|undefined;
}
function JsonToGetMoneyLogsResp(jsonobj: { [k:string]:any }): GetMoneyLogsResp{
	let obj: GetMoneyLogsResp={
		logs:null,
	}
	//logs
	if(jsonobj['logs']!=null&&jsonobj['logs']!=undefined){
		if(!(jsonobj['logs'] instanceof Array)){
			throw 'GetMoneyLogsResp.logs must be Array<MoneyLog>|null|undefined'
		}
		for(let element of jsonobj['logs']){
			if(typeof element!='object'){
				throw 'element in GetMoneyLogsResp.logs must be MoneyLog'
			}
			if(obj['logs']==null){
				obj['logs']=new Array<MoneyLog>
			}
			obj['logs'].push(JsonToMoneyLog(element))
		}
	}
	return obj
}
export interface MoneyLog{
	user_id: string;
	action: string;//spend,recharge,refund
	unique_id: string;
	src_dst: string;
	money_type: string;
	//Warning!!!Type is uint64,be careful of sign(+)
	money_amount: Long;
	//Warning!!!Type is int64,be careful of sign(+,-)
	ctime: Long;
}
function JsonToMoneyLog(jsonobj: { [k:string]:any }): MoneyLog{
	let obj: MoneyLog={
		user_id:'',
		action:'',
		unique_id:'',
		src_dst:'',
		money_type:'',
		money_amount:Long.ZERO,
		ctime:Long.ZERO,
	}
	//user_id
	if(jsonobj['user_id']!=null&&jsonobj['user_id']!=undefined){
		if(typeof jsonobj['user_id']!='string'){
			throw 'MoneyLog.user_id must be string'
		}
		obj['user_id']=jsonobj['user_id']
	}
	//action
	if(jsonobj['action']!=null&&jsonobj['action']!=undefined){
		if(typeof jsonobj['action']!='string'){
			throw 'MoneyLog.action must be string'
		}
		obj['action']=jsonobj['action']
	}
	//unique_id
	if(jsonobj['unique_id']!=null&&jsonobj['unique_id']!=undefined){
		if(typeof jsonobj['unique_id']!='string'){
			throw 'MoneyLog.unique_id must be string'
		}
		obj['unique_id']=jsonobj['unique_id']
	}
	//src_dst
	if(jsonobj['src_dst']!=null&&jsonobj['src_dst']!=undefined){
		if(typeof jsonobj['src_dst']!='string'){
			throw 'MoneyLog.src_dst must be string'
		}
		obj['src_dst']=jsonobj['src_dst']
	}
	//money_type
	if(jsonobj['money_type']!=null&&jsonobj['money_type']!=undefined){
		if(typeof jsonobj['money_type']!='string'){
			throw 'MoneyLog.money_type must be string'
		}
		obj['money_type']=jsonobj['money_type']
	}
	//money_amount
	if(jsonobj['money_amount']!=null&&jsonobj['money_amount']!=undefined){
		if(typeof jsonobj['money_amount']=='number'){
			if(!Number.isInteger(jsonobj['money_amount'])){
				throw 'MoneyLog.money_amount must be integer'
			}
			if(jsonobj['money_amount']<0){
				throw 'MoneyLog.money_amount overflow'
			}
			let tmp: Long=Long.ZERO
			try{
				tmp=Long.fromNumber(jsonobj['money_amount'],true)
			}catch(e){
				throw 'MoneyLog.money_amount must be integer'
			}
			obj['money_amount']=tmp
		}else if(typeof jsonobj['money_amount']=='string'){
			let tmp:Long=Long.ZERO
			try{
				tmp=Long.fromString(jsonobj['money_amount'],true)
			}catch(e){
				throw 'MoneyLog.money_amount must be integer'
			}
			if(tmp.toString()!=jsonobj['money_amount']){
				throw 'MoneyLog.money_amount overflow'
			}
			obj['money_amount']=tmp
		}else{
			throw 'format wrong!MoneyLog.money_amount must be integer'
		}
	}
	//ctime
	if(jsonobj['ctime']!=null&&jsonobj['ctime']!=undefined){
		if(typeof jsonobj['ctime']=='number'){
			if(!Number.isInteger(jsonobj['ctime'])){
				throw 'MoneyLog.ctime must be integer'
			}
			let tmp: Long=Long.ZERO
			try{
				tmp=Long.fromNumber(jsonobj['ctime'],false)
			}catch(e){
				throw 'MoneyLog.ctime must be integer'
			}
			obj['ctime']=tmp
		}else if(typeof jsonobj['ctime']=='string'){
			let tmp:Long=Long.ZERO
			try{
				tmp=Long.fromString(jsonobj['ctime'],false)
			}catch(e){
				throw 'MoneyLog.ctime must be integer'
			}
			if(tmp.toString()!=jsonobj['ctime']){
				throw 'MoneyLog.ctime overflow'
			}
			obj['ctime']=tmp
		}else{
			throw 'MoneyLog.ctime must be integer'
		}
	}
	return obj
}
export interface RechargeMoneyReq{
}
function RechargeMoneyReqToJson(_msg: RechargeMoneyReq): string{
	let s: string="{"
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface RechargeMoneyResp{
}
function JsonToRechargeMoneyResp(_jsonobj: { [k:string]:any }): RechargeMoneyResp{
	let obj: RechargeMoneyResp={
	}
	return obj
}
export interface RefundMoneyReq{
}
function RefundMoneyReqToJson(_msg: RefundMoneyReq): string{
	let s: string="{"
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface RefundMoneyResp{
}
function JsonToRefundMoneyResp(_jsonobj: { [k:string]:any }): RefundMoneyResp{
	let obj: RefundMoneyResp={
	}
	return obj
}
export interface SpendMoneyReq{
}
function SpendMoneyReqToJson(_msg: SpendMoneyReq): string{
	let s: string="{"
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface SpendMoneyResp{
}
function JsonToSpendMoneyResp(_jsonobj: { [k:string]:any }): SpendMoneyResp{
	let obj: SpendMoneyResp={
	}
	return obj
}
const _WebPathMoneyGetMoneyLogs: string ="/account.money/get_money_logs";
const _WebPathMoneyRechargeMoney: string ="/account.money/recharge_money";
const _WebPathMoneySpendMoney: string ="/account.money/spend_money";
const _WebPathMoneyRefundMoney: string ="/account.money/refund_money";
//ToB means this is used for internal
//ToB client must be used with https://github.com/chenjie199234/admin
//If your are not using 'admin' as your tob request's proxy gate,don't use this
export class MoneyBrowserClientToB {
	constructor(proxyhost: string,servergroup: string){
		if(proxyhost==null||proxyhost==undefined||proxyhost.length==0){
			throw "MoneyBrowserClientToB's proxyhost missing"
		}
		if(servergroup==null||servergroup==undefined||servergroup.length==0){
			throw "MoneyBrowserClientToB's servergroup missing"
		}
		this.host=proxyhost
		this.group=servergroup
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	get_money_logs(header: { [k: string]: string },req: GetMoneyLogsReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: GetMoneyLogsResp)=>void){
		if(!Number.isInteger(timeout)){
			throw 'timeout must be integer'
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let config={
			url:'/admin.app/proxy',
			method: 'post',
			baseURL: this.host,
			headers: header,
			data:{
				path:_WebPathMoneyGetMoneyLogs,
				appname:'account',
				groupname:this.group,
				data:GetMoneyLogsReqToJson(req),
			},
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:GetMoneyLogsResp=JsonToGetMoneyLogsResp(response.data.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	recharge_money(header: { [k: string]: string },req: RechargeMoneyReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: RechargeMoneyResp)=>void){
		if(!Number.isInteger(timeout)){
			throw 'timeout must be integer'
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let config={
			url:'/admin.app/proxy',
			method: 'post',
			baseURL: this.host,
			headers: header,
			data:{
				path:_WebPathMoneyRechargeMoney,
				appname:'account',
				groupname:this.group,
				data:RechargeMoneyReqToJson(req),
			},
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:RechargeMoneyResp=JsonToRechargeMoneyResp(response.data.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	spend_money(header: { [k: string]: string },req: SpendMoneyReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: SpendMoneyResp)=>void){
		if(!Number.isInteger(timeout)){
			throw 'timeout must be integer'
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let config={
			url:'/admin.app/proxy',
			method: 'post',
			baseURL: this.host,
			headers: header,
			data:{
				path:_WebPathMoneySpendMoney,
				appname:'account',
				groupname:this.group,
				data:SpendMoneyReqToJson(req),
			},
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:SpendMoneyResp=JsonToSpendMoneyResp(response.data.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	refund_money(header: { [k: string]: string },req: RefundMoneyReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: RefundMoneyResp)=>void){
		if(!Number.isInteger(timeout)){
			throw 'timeout must be integer'
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let config={
			url:'/admin.app/proxy',
			method: 'post',
			baseURL: this.host,
			headers: header,
			data:{
				path:_WebPathMoneyRefundMoney,
				appname:'account',
				groupname:this.group,
				data:RefundMoneyReqToJson(req),
			},
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:RefundMoneyResp=JsonToRefundMoneyResp(response.data.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	private host: string
	private group: string
}
