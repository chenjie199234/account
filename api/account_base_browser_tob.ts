// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.109<br />
// 	protoc             v4.25.3<br />
// source: api/account_base.proto<br />

export interface LogicError{
	code: number;
	msg: string;
}

export class BaseInfo{
	user_id: string = ''
	idcard: string = ''
	tel: string = ''
	email: string = ''
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	ctime: number = 0
	//Warning!!!map's value's type is int32,be careful of sign(+,-) and overflow
	money: Map<string,number>|null = null
	fromOBJ(obj:Object){
		if(obj["user_id"]){
			this.user_id=obj["user_id"]
		}
		if(obj["idcard"]){
			this.idcard=obj["idcard"]
		}
		if(obj["tel"]){
			this.tel=obj["tel"]
		}
		if(obj["email"]){
			this.email=obj["email"]
		}
		if(obj["ctime"]){
			this.ctime=obj["ctime"]
		}
		if(obj["money"] && Object.keys(obj["money"]).length>0){
			this.money=new Map<string,number>()
			for(let key of Object.keys(obj["money"])){
				this.money.set(key,obj["money"][key])
			}
		}
	}
}
export class GetBaseInfoReq{
	src_type: string = ''
	src: string = ''
	toJSON(){
		let tmp = {}
		if(this.src_type){
			tmp["src_type"]=this.src_type
		}
		if(this.src){
			tmp["src"]=this.src
		}
		return tmp
	}
}
export class GetBaseInfoResp{
	info: BaseInfo|null = null
	fromOBJ(obj:Object){
		if(obj["info"]){
			this.info=new BaseInfo()
			this.info.fromOBJ(obj["info"])
		}
	}
}
//timeout's unit is millisecond,it will be used when > 0
function call(timeout: number,url: string,opts: Object,error: (arg: LogicError)=>void,success: (arg: Object)=>void){
	let tid: number|null = null
	if(timeout>0){
		const c = new AbortController()
		opts["signal"] = c.signal
		tid = setTimeout(()=>{c.abort()},timeout)
	}
	let ok=false
	fetch(url,opts)
	.then(r=>{
		ok=r.ok
		if(r.ok){
			return r.json()
		}
		return r.text()
	})
	.then(d=>{
		if(!ok){
			throw d
		}
		success(JSON.parse(d.data))
	})
	.catch(e=>{
		if(e instanceof Error){
			error({code:-1,msg:e.message})
		}else if(e.length>0 && e[0]=='{' && e[e.length-1]=='}'){
			error(JSON.parse(e))
		}else{
			error({code:-1,msg:e})
		}
	})
	.finally(()=>{
		if(tid){
			clearTimeout(tid)
		}
	})
}
const _WebPathBaseGetBaseInfo: string ="/account.base/get_base_info";
//ToB means this is for internal
//ToB client must be used with https://github.com/chenjie199234/admin
//If your are not using 'admin' as your tob request's proxy gate,don't use this
export class BaseBrowserClientToB {
	constructor(proxyhost: string,serverprojectid: Array<number>,servergroup: string){
		if(!proxyhost || proxyhost.length==0){
			throw "BaseBrowserClientToB's proxyhost missing"
		}
		if(!serverprojectid || serverprojectid.length!=2){
			throw "BaseBrowserClientToB's serverprojectid missing or wrong"
		}
		if(!servergroup || servergroup.length==0){
			throw "BaseBrowserClientToB's servergroup missing"
		}
		this.host=proxyhost
		this.projectid=serverprojectid
		this.group=servergroup
	}
	//timeout's unit is millisecond,it will be used when > 0
	get_base_info(header: Object,req: GetBaseInfoReq,timeout: number,error: (arg: LogicError)=>void,success: (arg: GetBaseInfoResp)=>void){
		if(!header){
			header={}
		}
		header["Content-Type"] = "application/json"
		let realreq = {
			project_id:this.projectid,
			g_name:this.group,
			a_name:"account",
			path:_WebPathBaseGetBaseInfo,
			data:JSON.stringify(req),
		}
		call(timeout,this.host+"/admin.app/proxy",{method:"POST",headers:header,body:JSON.stringify(realreq)},error,function(arg: Object){
			let r=new GetBaseInfoResp()
			r.fromOBJ(arg)
			success(r)
		})
	}
	private host: string
	private projectid: Array<number>
	private group: string
}
