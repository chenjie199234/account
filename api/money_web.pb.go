// Code generated by protoc-gen-go-web. DO NOT EDIT.
// version:
// 	protoc-gen-go-web v0.0.77<br />
// 	protoc            v4.24.1<br />
// source: api/money.proto<br />

package api

import (
	context "context"
	json "encoding/json"
	cerror "github.com/chenjie199234/Corelib/cerror"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
	pool "github.com/chenjie199234/Corelib/pool"
	web "github.com/chenjie199234/Corelib/web"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	http "net/http"
	url "net/url"
	strings "strings"
)

var _WebPathMoneyGetMoneyLogs = "/account.money/get_money_logs"

type MoneyWebClient interface {
	GetMoneyLogs(context.Context, *GetMoneyLogsReq, http.Header) (*GetMoneyLogsResp, error)
}

type moneyWebClient struct {
	cc *web.WebClient
}

func NewMoneyWebClient(c *web.WebClient) MoneyWebClient {
	return &moneyWebClient{cc: c}
}

func (c *moneyWebClient) GetMoneyLogs(ctx context.Context, req *GetMoneyLogsReq, header http.Header) (*GetMoneyLogsResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-www-form-urlencoded")
	header.Set("Accept", "application/x-protobuf")
	query := pool.GetBuffer()
	defer pool.PutBuffer(query)
	query.AppendString("user_id=")
	if req.GetUserId() != "" {
		query.AppendString(url.QueryEscape(req.GetUserId()))
	}
	query.AppendByte('&')
	querystr := query.String()
	if len(querystr) > 0 {
		// drop last &
		querystr = querystr[:len(querystr)-1]
	}
	r, e := c.cc.Get(ctx, _WebPathMoneyGetMoneyLogs, querystr, header, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.ConvertStdError(e)
	}
	resp := new(GetMoneyLogsResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}

type MoneyWebServer interface {
	GetMoneyLogs(context.Context, *GetMoneyLogsReq) (*GetMoneyLogsResp, error)
}

func _Money_GetMoneyLogs_WebHandler(handler func(context.Context, *GetMoneyLogsReq) (*GetMoneyLogsResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetMoneyLogsReq)
		if e := ctx.ParseForm(); e != nil {
			log.Error(ctx, "[/account.money/get_money_logs]", map[string]interface{}{"error": e})
			ctx.Abort(cerror.ErrReq)
			return
		}
		data := pool.GetBuffer()
		defer pool.PutBuffer(data)
		data.AppendByte('{')
		if form := ctx.GetForm("user_id"); len(form) != 0 {
			data.AppendString("\"user_id\":")
			// transfer json escape
			formb, _ := json.Marshal(form)
			data.AppendBytes(formb)
			data.AppendByte(',')
		}
		if data.Len() > 1 {
			data.Bytes()[data.Len()-1] = '}'
			if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data.Bytes(), req); e != nil {
				log.Error(ctx, "[/account.money/get_money_logs]", map[string]interface{}{"error": e})
				ctx.Abort(cerror.ErrReq)
				return
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/account.money/get_money_logs]", map[string]interface{}{"error": errstr})
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetMoneyLogsResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func RegisterMoneyWebServer(engine *web.WebServer, svc MoneyWebServer, allmids map[string]web.OutsideHandler) {
	// avoid lint
	_ = allmids
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Money_GetMoneyLogs_WebHandler(svc.GetMoneyLogs))
		engine.Get(_WebPathMoneyGetMoneyLogs, mids...)
	}
}
